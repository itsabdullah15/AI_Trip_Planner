name: CI & CD to Cloud Run

on:
  push:
    branches: [ "main" ]   # runs only on main
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write   # required for Workload Identity Federation
  contents: read

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.CLOUD_RUN_REGION }}           # e.g. asia-south1
  REPO: ${{ secrets.ARTIFACT_REPO }}                # e.g. ai-trip-planner-repo
  BACKEND_SERVICE: ai-trip-planner-backend
  FRONTEND_SERVICE: ai-trip-planner-frontend
  BACKEND_DOCKERFILE: Dockerfile.backend
  FRONTEND_DOCKERFILE: Dockerfile
  GAR_DOMAIN: ${{ secrets.GAR_LOCATION }}-docker.pkg.dev  # e.g. asia-south1-docker.pkg.dev

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # (Optional) Skip tests for now
  test:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Skipping tests for now..."

  build-and-deploy:
    name: Build images & deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      # Debug step to confirm repo name
      - name: Debug GitHub repo
        run: echo "Repo is: $GITHUB_REPOSITORY"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA_EMAIL }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      # Dry run check: confirm auth works
      - name: Verify GCP authentication
        run: gcloud projects describe $PROJECT_ID

      - name: Configure Docker auth for Artifact Registry
        run: gcloud auth configure-docker $GAR_DOMAIN --quiet

      - name: Enable Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute tags
        id: vars
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "BACKEND_IMAGE=$GAR_DOMAIN/$PROJECT_ID/$REPO/backend:${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "FRONTEND_IMAGE=$GAR_DOMAIN/$PROJECT_ID/$REPO/frontend:${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Build & push backend image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -f ${BACKEND_DOCKERFILE} \
            -t ${{ steps.vars.outputs.BACKEND_IMAGE }} \
            --push .

      - name: Deploy backend to Cloud Run
        run: |
          gcloud run deploy ${BACKEND_SERVICE} \
            --image ${{ steps.vars.outputs.BACKEND_IMAGE }} \
            --region ${REGION} \
            --platform managed \
            --allow-unauthenticated

      - name: Get backend URL
        id: backend_url
        run: |
          URL=$(gcloud run services describe ${BACKEND_SERVICE} \
            --region ${REGION} \
            --format='value(status.url)')
          echo "url=${URL}" >> $GITHUB_OUTPUT
          echo "Backend URL: ${URL}"

      - name: Build & push frontend image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -f ${FRONTEND_DOCKERFILE} \
            -t ${{ steps.vars.outputs.FRONTEND_IMAGE }} \
            --push .

      - name: Deploy frontend to Cloud Run
        run: |
          gcloud run deploy ${FRONTEND_SERVICE} \
            --image ${{ steps.vars.outputs.FRONTEND_IMAGE }} \
            --region ${REGION} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars BACKEND_URL=${{ steps.backend_url.outputs.url }} \
            $( [[ -n "${{ secrets.API_KEY_SECRET_NAME }}" ]] && echo --update-secrets API_KEY=${{ secrets.API_KEY_SECRET_NAME }}:latest )